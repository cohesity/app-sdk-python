# -*- coding: utf-8 -*-
# Copyright 2019 Cohesity Inc.


class VolumeInfo(object):

    """Implementation of the 'VolumeInfo' model.

    Information about a persistent volume created using app API

    Attributes:
        volume_name (string): Name of the volume
        volume_tag (string): A unique tag generated by apps backend for the
            volume
        volume_capacity_bytes (int): volume capacity
        status (StatusEnum): Status of the volume
        details (string): Human readable details of the status of the volume
        initializing_percentage (int): Estimate of the progress of
            initializing the volume

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "volume_name":'volumeName',
        "volume_tag":'volumeTag',
        "volume_capacity_bytes":'volumeCapacityBytes',
        "status":'status',
        "details":'details',
        "initializing_percentage":'initializingPercentage'
    }

    def __init__(self,
                 volume_name=None,
                 volume_tag=None,
                 volume_capacity_bytes=None,
                 status=None,
                 details=None,
                 initializing_percentage=None):
        """Constructor for the VolumeInfo class"""

        # Initialize members of the class
        self.volume_name = volume_name
        self.volume_tag = volume_tag
        self.volume_capacity_bytes = volume_capacity_bytes
        self.status = status
        self.details = details
        self.initializing_percentage = initializing_percentage


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        volume_name = dictionary.get('volumeName')
        volume_tag = dictionary.get('volumeTag')
        volume_capacity_bytes = dictionary.get('volumeCapacityBytes')
        status = dictionary.get('status')
        details = dictionary.get('details')
        initializing_percentage = dictionary.get('initializingPercentage')

        # Return an object of this model
        return cls(volume_name,
                   volume_tag,
                   volume_capacity_bytes,
                   status,
                   details,
                   initializing_percentage)


